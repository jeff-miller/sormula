/* sormula - Simple object relational mapping
 * Copyright (C) 2011-2020 Jeff Miller
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.sormula.active.builder;

import javax.sql.DataSource;

import org.sormula.SormulaException;
import org.sormula.active.ActiveDatabase;


/**
 * Class for building an {@link ActiveDatabase} instance using a fluent style.
 * <p>
 * Example:
 * <blockquote><pre>
ActiveDatabase ad = ActiveDatbase.builder(someDataSource).readOnly(true).build();
 * </pre></blockquote>
 * @author Jeff Miller
 * @since 4.4
 */
public class ActiveDatabaseBuilder 
{
    String dataSourceName;
    DataSource dataSource;
    String schema;
    boolean autoGeneratedKeys;
    boolean readOnly;
    boolean timings;
    
    
    /**
     * Constructs for a data source name.
     * 
     * @param dataSourceName name of data source
     */
    public ActiveDatabaseBuilder(String dataSourceName) 
    {
        this.dataSourceName = dataSourceName;
        initDatabaseDefaults();
    }
    
    
    /**
     * Constructs for a data source.
     * 
     * @param dataSource data source
     */
    public ActiveDatabaseBuilder(DataSource dataSource) 
    {
        this.dataSource = dataSource;
        initDatabaseDefaults();
    }
    
    
    void initDatabaseDefaults()
    {
        schema = "";
        autoGeneratedKeys = true;
    }
    

    /**
     * @return an {@link ActiveDatabase}
     * @throws SormulaException if error
     */
    public ActiveDatabase build() throws SormulaException
    {
        ActiveDatabase activeDatabase;
        if (dataSourceName != null) 
        {
            activeDatabase = new ActiveDatabase(dataSourceName, schema);
        }
        else if (dataSource != null)
        {
            activeDatabase = new ActiveDatabase(dataSource, schema);
        }
        else
        {
            throw new SormulaException("data source name and data source are null");
        }
        
        activeDatabase.setAutoGeneratedKeys(autoGeneratedKeys);
        activeDatabase.setReadOnly(readOnly);
        activeDatabase.setTimings(timings);
        
        return activeDatabase;
    }
    
    
    /**
     * @param schema see {@link ActiveDatabase}
     * @return this
     */
    public ActiveDatabaseBuilder schema(String schema)
    {
        this.schema = schema;
        return this;
    }
    

    /**
     * @param autoGeneratedKeys see {@link ActiveDatabase}
     * @return this
     */
    public ActiveDatabaseBuilder autoGeneratedKeys(boolean autoGeneratedKeys)
    {
        this.autoGeneratedKeys = autoGeneratedKeys;
        return this;
    }
    

    /**
     * @param readOnly see {@link ActiveDatabase}
     * @return this
     */
    public ActiveDatabaseBuilder readOnly(boolean readOnly)
    {
        this.readOnly = readOnly;
        return this;
    }
    
    
    /**
     * @param timings see {@link ActiveDatabase}
     * @return this
     */
    public ActiveDatabaseBuilder timings(boolean timings)
    {
        this.timings = timings;
        return this;
    }
}
