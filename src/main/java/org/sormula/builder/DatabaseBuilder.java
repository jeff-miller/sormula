/* sormula - Simple object relational mapping
 * Copyright (C) 2011-2012 Jeff Miller
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.sormula.builder;

import java.sql.Connection;

import javax.sql.DataSource;

import org.sormula.Database;
import org.sormula.SormulaException;


/**
 * Class for building a {@link Database} instance using a fluent style.
 * <p>
 * Example:
 * <blockquote><pre>
try (Database database = Database.builder(dataSource)
.schema("someschema")
.readOnly(true)
.build())
{
List&lt;SomePojo&gt; rows = database.getTable(SomePojo.class).selectAll();
}
 * </pre></blockquote>
 * @author Jeff Miller
 * @since 4.4
 */
public class DatabaseBuilder 
{
    String dataSourceName;
    DataSource dataSource;
    Connection connection;
    String schema;
    boolean autoGeneratedKeys;
    boolean readOnly;
    boolean timings;
    
    
    public DatabaseBuilder(String dataSourceName) 
    {
        this.dataSourceName = dataSourceName;
        initDatabaseDefaults();
    }
    
    
    public DatabaseBuilder(DataSource dataSource) 
    {
        this.dataSource = dataSource;
        initDatabaseDefaults();
    }
    
    
    public DatabaseBuilder(Connection connection) 
    {
        this.connection = connection;
        initDatabaseDefaults();
    }
    
    
    void initDatabaseDefaults()
    {
        schema = "";
        autoGeneratedKeys = true;
    }
    
    
    public Database build() throws SormulaException
    {
        Database database;
        if (dataSourceName != null) 
        {
            database = new Database(dataSourceName, schema);
        }
        else if (dataSource != null)
        {
            database = new Database(dataSource, schema);
        }
        else if (connection != null)
        {
            database = new Database(connection, schema);
        }
        else
        {
            throw new SormulaException("data source name, data source, connection are null");
        }
        
        database.setAutoGeneratedKeys(autoGeneratedKeys);
        database.setReadOnly(readOnly);
        database.setTimings(timings);
        
        return database;
    }
    
    
    public DatabaseBuilder schema(String schema)
    {
        this.schema = schema;
        return this;
    }
    
    
    public DatabaseBuilder autoGeneratedKeys(boolean autoGeneratedKeys)
    {
        this.autoGeneratedKeys = autoGeneratedKeys;
        return this;
    }
    
    
    public DatabaseBuilder readOnly(boolean readOnly)
    {
        this.readOnly = readOnly;
        return this;
    }
    
    
    public DatabaseBuilder timings(boolean timings)
    {
        this.timings = timings;
        return this;
    }
}
