/* sormula - Simple object relational mapping
 * Copyright (C) 2011-2012 Jeff Miller
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.sormula.translator;

import java.lang.reflect.Field;
import java.sql.PreparedStatement;
import java.sql.ResultSet;


/**
 * Interface of minimal behavior needed for a column translator. Interface provides
 * methods for reading/writing values from/to table column.
 *
 * @since 1.0
 * @author Jeff Miller
 * @param <R> class type for a row object
 */
public interface ColumnTranslator<R>
{
    /**
     * Gets the Java field that participates in translation.
     * 
     * @return field within row class that corresponds to column
     */
    public Field getField();
    
    
    /**
     * Gets the SQL column name.
     * 
     * @return name of table column to be translated
     */
    public String getColumnName();
    
    
    /**
     * Gets the identity status. True indicates that column value is generated by
     * database upon insert.
     * 
     * @return true if column is declared as an identity column 
     */
    public boolean isIdentity();
    
    
    /**
     * Gets the readonly status. True indicates that column should not be modified.
     * 
     * @return true if column will not be written to database
     * @since 3.2
     */
    public boolean isReadOnly();
    

    /**
     * Gets type type of access used for getting/setting value of field.
     * 
     * @return the field access type specified by {@link Column#fieldAccess()} or 
     * {@link FieldAccessType#Default} if no {@link Column} annotation was used
     * @since 3.4
     *
    TODO unnecessary low-level detail?
    public FieldAccessType getFieldAccessType();
    */ 
    
    
    /**
     * Reads column value from result set and sets in row object.
     * 
     * @param resultSet read column from this result set
     * @param columnIndex read value at this column index from result set 
     * @param row set value in this row
     * @throws Exception if error 
     */
    public void read(ResultSet resultSet, int columnIndex, R row) throws Exception;
    
    
    /**
     * Gets column value from row and sets as parameter in prepared statement.
     * 
     * @param preparedStatement set column value as parameter in this statement
     * @param parameterIndex set parameter at this index
     * @param row get value from this row
     * @throws Exception if error 
     */
    public void write(PreparedStatement preparedStatement, int parameterIndex, R row) throws Exception;
}
