/* sormula - Simple object relational mapping
 * Copyright (C) 2011-2012 Jeff Miller
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.sormula.tests;

import org.sormula.Database;
import org.sormula.SormulaException;
import org.sormula.Table;
import org.sormula.selector.PaginatedSelector;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;


/**
 * Inserts test data for {@link PaginatedSelector} tests.
 * 
 * @author Jeff Miller
 */
@Test(singleThreaded=true, groups="fundamental.table")
public class TableTester extends DatabaseTest<TableTesterRow>
{
    @BeforeClass
    public void setUp() throws Exception
    {
        openDatabase();
        
        if (isTestScrollableResultSets())
        {
            createTable(TableTesterRow.class, 
                "CREATE TABLE " + getSchemaPrefix() + TableTesterRow.class.getSimpleName() + " (" +
                " id INTEGER NOT NULL PRIMARY KEY," +
                " type SMALLINT," +
                " description VARCHAR(30)" +
                ")"
            );
        }
    }
    
    
    @AfterClass
    public void tearDown() throws Exception
    {
        closeDatabase();
    }
    
    
    @Test
    public void builderAutoGeneratedKeys() throws SormulaException
    {
        Database database = getDatabase();
        Table<TableTesterRow> table;
        
        table = Table.builder(database, TableTesterRow.class).build();
        assert table.isAutoGeneratedKeys() == database.isAutoGeneratedKeys() : "autoGeneratedKeys should default to database";
        
        table = Table.builder(database, TableTesterRow.class).autoGeneratedKeys(false).build();
        assert table.isAutoGeneratedKeys() == false : "autoGeneratedKeys should be false";
        
        table = Table.builder(database, TableTesterRow.class).autoGeneratedKeys(true).build();
        assert table.isAutoGeneratedKeys() == true : "autoGeneratedKeys should be true";
    }
}
