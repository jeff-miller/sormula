/* sormula - Simple object relational mapping
 * Copyright (C) 2011-2012 Jeff Miller
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.sormula.tests.active.nonidentity;

import java.util.ArrayList;

import org.sormula.active.ActiveDatabase;
import org.sormula.active.ActiveTable;
import org.sormula.tests.active.ActiveDatabaseTest;
import org.testng.annotations.Test;


/**
 * Tests inserting active record that has identity column without using the identity
 * generation.
 * 
 * @author Jeff Miller
 */
@Test(singleThreaded=true, groups="active.insert")
public class InsertTest extends ActiveDatabaseTest<SormulaTestARNI>
{
    @Override
    protected void open() throws Exception
    {
        if (isTestIdentity())
        {
            super.open();
            createTable(SormulaTestARNI.class, 
                "CREATE TABLE " + getSchemaPrefix() + SormulaTestARNI.class.getSimpleName() + " (" +
                " id " + getIdentityColumnDDL() + "," +
                " description VARCHAR(30)" +
                ")"
            );
        }
    }
    
    
    @Test
    public void insertOneARNI2()
    {
        if (isTestIdentity() && isTestIdentityOverride())
        {
            // turn off auto generated keys for database
            ActiveDatabase activeDatabase = getActiveDatabase();
            activeDatabase.setAutoGeneratedKeys(false); // replace default
            
            // create new table to force auto generated keys as false
            // getActiveTable may return ActiveTable with auto generated as true
            ActiveTable<SormulaTestARNI> table = new ActiveTable<>(activeDatabase, SormulaTestARNI.class);
            
            SormulaTestARNI insertedRecord = table.newActiveRecord(); // creates SormulaTestARNI and sets data source
            int id = -1011; // use negative to avoid collisions with generated keys
            insertedRecord.setId(id);
            insertedRecord.setDescription("Insert one ARNI 2");
            insertedRecord.insert();
            activeDatabase.setAutoGeneratedKeys(true); // reset to default
            
            // confirm
            SormulaTestARNI selectedRecord = table.select(id);
            assert selectedRecord != null && selectedRecord.getId() == id : "Insert one ARNI failed for id=" + id;
        }
    }
    
    
    @Test
    public void insertCollectionARNI2()
    {
        if (isTestIdentity() && isTestIdentityOverride())
        {
            // insert collection with known id's
            int[] ids = {-2011, -2017, -2013}; // use negative to avoid collisions with generated keys
            ArrayList<SormulaTestARNI> list = new ArrayList<>(ids.length);
            
            for (int id : ids)
            {
                list.add(new SormulaTestARNI(id, "Insert collection ARNI " + id));
            }
            
            // turn off auto generated keys for database
            ActiveDatabase activeDatabase = getActiveDatabase();
            activeDatabase.setAutoGeneratedKeys(false); // replace default
            
            // create new table to force auto generated keys as false
            // getActiveTable may return ActiveTable with auto generated as true
            ActiveTable<SormulaTestARNI> table = new ActiveTable<>(activeDatabase, SormulaTestARNI.class);
            table.insertAll(list);
            activeDatabase.setAutoGeneratedKeys(true); // reset to default
            
            // confirm
            for (int id : ids)
            {
                SormulaTestARNI selectedRecord = table.select(id);
                assert selectedRecord != null && selectedRecord.getId() == id : "Insert collection ARNI failed for id=" + id;
            }
        }
    }
    
    
    @Test
    public void insertARNIBatch2()
    {
        if (isTestIdentity() && isTestIdentityOverride())
        {
            // insert collection with known id's
            int[] ids = {-3011, -3017, -3013}; // use negative to avoid collisions with generated keys
            ArrayList<SormulaTestARNI> list = new ArrayList<>(ids.length);
            
            for (int id : ids)
            {
                list.add(new SormulaTestARNI(id, "Insert batch ARNI " + id));
            }
            
            // turn off auto generated keys for database
            ActiveDatabase activeDatabase = getActiveDatabase();
            activeDatabase.setAutoGeneratedKeys(false); // replace default
            
            // create new table to force auto generated keys as false
            // getActiveTable may return ActiveTable with auto generated as true
            ActiveTable<SormulaTestARNI> table = new ActiveTable<>(activeDatabase, SormulaTestARNI.class);

            table.insertAllBatch(list);
            activeDatabase.setAutoGeneratedKeys(true); // reset to default
            
            // confirm
            for (int id : ids)
            {
                SormulaTestARNI selectedRecord = table.select(id);
                assert selectedRecord != null && selectedRecord.getId() == id : "Insert batch ARNI failed for id=" + id;
            }
        }
    }
}
